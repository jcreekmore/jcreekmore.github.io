<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Technological Musings</title>
    <link href="http://thecreekmores.org/atom.xml" rel="self" />
    <link href="http://thecreekmores.org" />
    <id>http://thecreekmores.org/atom.xml</id>
    <author>
        <name>Jonathan Creekmore</name>
        <email>jonathan@thecreekmores.org</email>
    </author>
    <updated>2016-12-28T00:00:00Z</updated>
    <entry>
    <title>Regular Expression Decoding</title>
    <link href="http://thecreekmores.org/posts/2016-12-28-regex-decode.html" />
    <id>http://thecreekmores.org/posts/2016-12-28-regex-decode.html</id>
    <published>2016-12-28T00:00:00Z</published>
    <updated>2016-12-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-meta">
	Posted on <time pubdate datetime="December 28, 2016">December 28, 2016</time>
    
	    by <a class="email" href="mailto:jonathan@thecreekmores.org?subject=Regular Expression Decoding">Jonathan Creekmore</a>
    
</div>

<p>Regular expressions are great. They can be a quick and easy way to extract substrings of interest from a string. I use the awesome <code>hyper</code> crate in my day job to serve up a web API and I use the <code>hyper-router</code> crate to define all of the routes for the web API using regular expressions. Often times, those regular expressions are used something like this (stub code borrowed from <a href="https://github.com/marad/hyper-router">hyper-router</a>):</p>
<div class="sourceCode"><table class="sourceCode rust numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="sourceCode"><pre><code class="sourceCode rust"><span class="kw">extern</span> <span class="kw">crate</span> hyper;
<span class="kw">extern</span> <span class="kw">crate</span> hyper_router;
<span class="kw">extern</span> <span class="kw">crate</span> regex;

<span class="kw">use</span> hyper::server::{Server, Request, Response};
<span class="kw">use</span> hyper::status::StatusCode;
<span class="kw">use</span> hyper::uri::RequestUri;
<span class="kw">use</span> hyper_router::{Route, RouterBuilder};
<span class="kw">use</span> regex::Regex;

<span class="kw">const</span> ENDPOINT: &amp;<span class="ot">&#39;static</span> <span class="dt">str</span> = <span class="st">r&quot;^/api/(?P&lt;mac&gt;[a-f0-9]{12})/version/(?P&lt;version&gt;[0-9]{14})&quot;</span>;

<span class="kw">fn</span> get_uri(uri: &amp;RequestUri) -&gt; <span class="dt">String</span> {
  <span class="co">// get the uri as a string</span>
}

<span class="co">// INTERESTING BIT IS HERE!!!</span>
<span class="kw">fn</span> endpoint_handler(req: Request, res: Response) {
  <span class="kw">let</span> uri = get_uri(&amp;req.uri);
  <span class="kw">let</span> endpoint_regex = Regex::new(ENDPOINT).unwrap();
  <span class="kw">let</span> captures = endpoint_regex.captures(&amp;uri).unwrap()
  <span class="kw">let</span> mac = captures.name(<span class="st">&quot;mac&quot;</span>).unwrap();
  <span class="kw">let</span> version_str = captures.name(<span class="st">&quot;version&quot;</span>).unwrap();
  <span class="kw">let</span> version: <span class="dt">u64</span> = version_str.parse().unwrap();

  <span class="co">// Do something with the mac and the version number</span>

  res.send(b<span class="st">&quot;Hello World!&quot;</span>).unwrap();
}

<span class="kw">fn</span> main() {
  <span class="kw">let</span> router = RouterBuilder::new()
    .add(Route::get(ENDPOINT).using(endpoint_handler))
    .build();

  Server::http(<span class="st">&quot;0.0.0.0:8080&quot;</span>).unwrap()
    .handle(<span class="kw">move</span> |request: Request, response: Response| {
      <span class="kw">match</span> router.find_handler(&amp;request) {
        <span class="cn">Ok</span>(handler) =&gt; handler(request, response),
        <span class="cn">Err</span>(StatusCode::NotFound) =&gt; response.send(b<span class="st">&quot;not found&quot;</span>).unwrap(),
        <span class="cn">Err</span>(_) =&gt; response.send(b<span class="st">&quot;some error&quot;</span>).unwrap()
     }
   }).unwrap();
}</code></pre></td></tr></table></div>
<p>That code isnâ€™t too terrible, but it is ignoring a lot of error handling for extracting the mac and version strings from the regular expression, as well as error code for converting that version string to an actual number. Now, in this case, the unwraps are probably okay since:</p>
<ul>
<li>We had to match against the regular expression for the <code>endpoint_handler</code> to be called, so we should successfully get a captures object from applying the regex to the uri.</li>
<li>Both mac and version will exist.</li>
<li>The version string will be a number that fits in a u64 because of the regex.</li>
</ul>
<p>However, the code gets very repetitive. What if we could just do something like this?</p>
<div class="sourceCode"><table class="sourceCode rust numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="sourceCode"><pre><code class="sourceCode rust"><span class="kw">extern</span> <span class="kw">crate</span> regex_decode;
<span class="kw">use</span> regex_decode::decode;

<span class="at">#[</span>derive<span class="at">(</span>RustcDecodable<span class="at">)]</span>
<span class="kw">struct</span> EndpointUri {
  mac: <span class="dt">String</span>,
  version: <span class="dt">u64</span>,
}

<span class="kw">fn</span> endpoint_handler(req: Request, res: Response) {
  <span class="kw">let</span> uri = get_uri(&amp;req.uri);
  <span class="kw">let</span> endpoint_regex = Regex::new(ENDPOINT).unwrap();
  <span class="kw">let</span> endpoint = decode::&lt;EndpointUri&gt;(&amp;endpoint_regex, &amp;uri).unwrap();

  <span class="co">// Do something with the mac and the version number we got from</span>
  <span class="co">// the endpoint...</span>

  res.send(b<span class="st">&quot;Hello World!&quot;</span>).unwrap();
}</code></pre></td></tr></table></div>
<p>That is what the <a href="https://github.com/jcreekmore/regex-decode">regex-decode</a> crate does for you. It provides the ability to decode the named capture groups of a regular expression into a struct. Additionally, it will do type conversions from strings into other primitive types that are defined in the struct. So, in the above example, it hides away the boilerplate of extracting the named captures and the type conversion and gives you a single place to check for errors, instead of every step along the way.</p>
<p>If defining a struct is too heavy-weight for you, just have it decode to a tuple:</p>
<div class="sourceCode"><table class="sourceCode rust numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="sourceCode"><pre><code class="sourceCode rust"><span class="kw">extern</span> <span class="kw">crate</span> regex_decode;
<span class="kw">use</span> regex_decode::decode;

<span class="kw">fn</span> endpoint_handler(req: Request, res: Response) {
  <span class="kw">let</span> uri = get_uri(&amp;req.uri);
  <span class="kw">let</span> endpoint_regex = Regex::new(ENDPOINT).unwrap();
  <span class="kw">let</span> (mac, version) = decode::&lt;(<span class="dt">String</span>, <span class="dt">u64</span>)&gt;(&amp;endpoint_regex, &amp;uri).unwrap();

  <span class="co">// Do something with the mac and the version number we got from</span>
  <span class="co">// the endpoint...</span>

  res.send(b<span class="st">&quot;Hello World!&quot;</span>).unwrap();
}</code></pre></td></tr></table></div>
<p>In this case, we are not decoding by the names of the capture groups and are instead just grabbing the captures by position. Plus, that still gives you the type safety that the struct would give you.</p>
<p>You should be able to use any type you want as long as it is <code>RustcDecodable</code>. However, recursive types do not make a whole lot of sense while you are parsing a regular expression, so those are not handled. Also, I have not figured out a good way to decode tuple structs yet, so the library will emit an error if you are trying to decode to a tuple struct. But, for the use case of quickly decoding to a simple struct, the crate works just fine.</p>
]]></summary>
</entry>
<entry>
    <title>Untyped Arithmetic Expressions</title>
    <link href="http://thecreekmores.org/posts/2016-12-17-untyped-arithmetic-expressions.html" />
    <id>http://thecreekmores.org/posts/2016-12-17-untyped-arithmetic-expressions.html</id>
    <published>2016-12-17T00:00:00Z</published>
    <updated>2016-12-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-meta">
	Posted on <time pubdate datetime="December 17, 2016">December 17, 2016</time>
    
	    by <a class="email" href="mailto:jonathan@thecreekmores.org?subject=Untyped Arithmetic Expressions">Jonathan Creekmore</a>
    
</div>

<p>I have recently started working my way through the excellent <em>Types and Programming Languages (TaPL)</em> by Benjamin Pierce (expect to see this name pop up a lot in the future, because I plan on working through <em>Software Foundations</em> by him as well). Since I am also a huge fan of the Rust programming language, I have started working through the programming examples in Rust.</p>
<p>Rust is not the best language to write little interpreters in. While it provides pattern matching, which is really essential for this task, the borrowing rules force the code to be a bit ugly at times. The first major code example in the book is an interpreter for untyped arithmetic expressions. Rust does make it fairly short, so I will reproduce it all here and then walk through bits of it to explain.</p>
<h3 id="untyped-arithmetic-expressions">Untyped Arithmetic Expressions</h3>
<div class="sourceCode"><table class="sourceCode rust numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
</pre></td><td class="sourceCode"><pre><code class="sourceCode rust"><span class="at">#![</span>feature<span class="at">(</span>box_syntax<span class="at">,</span> box_patterns<span class="at">)]</span>

<span class="at">#[</span>derive<span class="at">(</span><span class="bu">Clone</span><span class="at">,</span> <span class="bu">Debug</span><span class="at">,</span> <span class="bu">PartialEq</span><span class="at">)]</span>
<span class="kw">pub</span> <span class="kw">enum</span> Term {
    True,
    False,
    Zero,
    IsZero(<span class="dt">Box</span>&lt;Term&gt;),
    Succ(<span class="dt">Box</span>&lt;Term&gt;),
    Pred(<span class="dt">Box</span>&lt;Term&gt;),
    If(<span class="dt">Box</span>&lt;Term&gt;, <span class="dt">Box</span>&lt;Term&gt;, <span class="dt">Box</span>&lt;Term&gt;),
}

<span class="kw">pub</span> <span class="kw">fn</span> is_numeric_val(t: &amp;Term) -&gt; <span class="dt">bool</span> {
    <span class="kw">match</span> *t {
        Term::Zero =&gt; <span class="cn">true</span>,
        Term::Succ(<span class="kw">ref</span> t) =&gt; is_numeric_val(t),
        _ =&gt; <span class="cn">false</span>,
    }
}

<span class="kw">pub</span> <span class="kw">fn</span> eval1(t: &amp;Term) -&gt; <span class="dt">Option</span>&lt;Term&gt; {
    <span class="kw">match</span> *t {
        <span class="co">/// True-valued if statement</span>
        Term::If(<span class="kw">box</span> Term::True, <span class="kw">ref</span> t2, _) =&gt; <span class="cn">Some</span>(*t2.clone()),
        <span class="co">/// False-valued if statement</span>
        Term::If(<span class="kw">box</span> Term::False, _, <span class="kw">ref</span> t3) =&gt; <span class="cn">Some</span>(*t3.clone()),
        <span class="co">/// Evaluate the condition first, then return an if statement</span>
        <span class="co">/// that has the condition evaluated to a true or false</span>
        Term::If(<span class="kw">ref</span> cond, <span class="kw">ref</span> t2, <span class="kw">ref</span> t3) =&gt; {
            eval1(cond).map(|boolean| {
                 Term::If(<span class="kw">box</span> boolean, <span class="kw">box</span> *t2.clone(), <span class="kw">box</span> *t3.clone())
            })
        }
        <span class="co">/// Succ(t) means we have to evaluate t first to simplify it, then we</span>
        <span class="co">/// rewrite the term to Succ(evaled)</span>
        Term::Succ(<span class="kw">ref</span> t) =&gt; eval1(t).map(|evaled| Term::Succ(<span class="kw">box</span> evaled)),
        <span class="co">/// The predecessor of Zero is defined as Zero</span>
        Term::Pred(<span class="kw">box</span> Term::Zero) =&gt; <span class="cn">Some</span>(Term::Zero),
        <span class="co">/// The predecessor of the successor of a value is the value itself</span>
        <span class="co">/// (if it was a numeric value to begin with)</span>
        Term::Pred(<span class="kw">box</span> Term::Succ(<span class="kw">ref</span> nv1)) <span class="kw">if</span> is_numeric_val(nv1) =&gt; <span class="cn">Some</span>(*nv1.clone()),
        <span class="co">/// Pred(t) means we have to evaluate t first to simplify it, then we</span>
        <span class="co">/// rewrite the term to Pred(evaled)</span>
        Term::Pred(<span class="kw">ref</span> t) =&gt; eval1(t).map(|evaled| Term::Pred(<span class="kw">box</span> evaled)),
        <span class="co">/// By definition, the Zero term IsZero.</span>
        Term::IsZero(<span class="kw">box</span> Term::Zero) =&gt; <span class="cn">Some</span>(Term::True),
        <span class="co">/// If the term is numeric and the successor of a value, then it cannot be IsZero</span>
        Term::IsZero(<span class="kw">box</span> Term::Succ(<span class="kw">ref</span> nv1)) <span class="kw">if</span> is_numeric_val(nv1) =&gt; <span class="cn">Some</span>(Term::False),
        <span class="co">/// If a term evals to Zero, then the term IsZero</span>
        Term::IsZero(<span class="kw">ref</span> t) =&gt; eval1(t).map(|evaled| Term::IsZero(<span class="kw">box</span> evaled)),
        _ =&gt; <span class="cn">None</span>,
    }
}

<span class="kw">pub</span> <span class="kw">fn</span> eval(t: &amp;Term) -&gt; <span class="dt">Option</span>&lt;Term&gt; {
    <span class="cn">Some</span>(eval1(t)
             .and_then(|t| eval(&amp;t))
             .unwrap_or(t.clone()))
}</code></pre></td></tr></table></div>
<p>So, due to Rustâ€™s memory management rules, we have to specify when structures are stored on the heap and when they are just stored in place. In Rust, we can do that by declaring the object to be boxed with <code>Box</code>. So, when we define the <code>Term</code> enumeration (lines 4â€“12), terms that have other terms embedded in them take the embedded terms as boxes. That leads us to the magic at the very first line. To be able to pattern match inside of a <code>Box</code>, we have to enable the <code>box_patterns</code> feature. I chose to also enable the <code>box_syntax</code> feature because it makes the code a bit shorter when creating boxes. Note that compiler features are not stable, so you have to compile this code with a nightly compiler to get it to build. I built it on 1.10 initially and recently rebuilt it using 1.13.</p>
<p>The evaluation functions are mostly self-explanatory with the in-line comments I put into place. I want to make a few general comments, though. Evaluating these terms works mainly like algebraic simplification. At each step, you look at the pattern and perform the required simplification. The <code>eval1</code> function performs what is described in <em>TaPL</em> as a single-step evaluation. It does a single step in the evalution process and returns a simpler expression. Then, the <code>eval</code> function causes that simpler expression to go back through the <code>eval1</code> function again to further simplify it until it cannot be simplified any more. At that point, <code>eval1</code> will return <code>None</code>, causing the recursion to terminate and the fully simplified form to be returned as the answer.</p>
<p>While I did not include them, I wrote several tests to verify that I was evaluating everything correctly. You can see the Cargo project (including the tests) in the <a href="https://github.com/jcreekmore/tapl/tree/master/arith">arith directory of my tapl repo on Github</a>.</p>
]]></summary>
</entry>

</feed>
